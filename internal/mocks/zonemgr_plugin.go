// Code generated by MockGen. DO NOT EDIT.
// Source: plugins/zonemgr_plugin.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/bcurnow/zonemgr/models"
	plugins "github.com/bcurnow/zonemgr/plugins"
	gomock "github.com/golang/mock/gomock"
)

// MockZoneMgrPlugin is a mock of ZoneMgrPlugin interface.
type MockZoneMgrPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockZoneMgrPluginMockRecorder
}

// MockZoneMgrPluginMockRecorder is the mock recorder for MockZoneMgrPlugin.
type MockZoneMgrPluginMockRecorder struct {
	mock *MockZoneMgrPlugin
}

// NewMockZoneMgrPlugin creates a new mock instance.
func NewMockZoneMgrPlugin(ctrl *gomock.Controller) *MockZoneMgrPlugin {
	mock := &MockZoneMgrPlugin{ctrl: ctrl}
	mock.recorder = &MockZoneMgrPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZoneMgrPlugin) EXPECT() *MockZoneMgrPluginMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockZoneMgrPlugin) Configure(config *models.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockZoneMgrPluginMockRecorder) Configure(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockZoneMgrPlugin)(nil).Configure), config)
}

// Normalize mocks base method.
func (m *MockZoneMgrPlugin) Normalize(identifier string, rr *models.ResourceRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Normalize", identifier, rr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Normalize indicates an expected call of Normalize.
func (mr *MockZoneMgrPluginMockRecorder) Normalize(identifier, rr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Normalize", reflect.TypeOf((*MockZoneMgrPlugin)(nil).Normalize), identifier, rr)
}

// PluginTypes mocks base method.
func (m *MockZoneMgrPlugin) PluginTypes() ([]plugins.PluginType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginTypes")
	ret0, _ := ret[0].([]plugins.PluginType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginTypes indicates an expected call of PluginTypes.
func (mr *MockZoneMgrPluginMockRecorder) PluginTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginTypes", reflect.TypeOf((*MockZoneMgrPlugin)(nil).PluginTypes))
}

// PluginVersion mocks base method.
func (m *MockZoneMgrPlugin) PluginVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginVersion indicates an expected call of PluginVersion.
func (mr *MockZoneMgrPluginMockRecorder) PluginVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginVersion", reflect.TypeOf((*MockZoneMgrPlugin)(nil).PluginVersion))
}

// Render mocks base method.
func (m *MockZoneMgrPlugin) Render(identifier string, rr *models.ResourceRecord) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", identifier, rr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Render indicates an expected call of Render.
func (mr *MockZoneMgrPluginMockRecorder) Render(identifier, rr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockZoneMgrPlugin)(nil).Render), identifier, rr)
}

// ValidateZone mocks base method.
func (m *MockZoneMgrPlugin) ValidateZone(name string, zone *models.Zone) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateZone", name, zone)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateZone indicates an expected call of ValidateZone.
func (mr *MockZoneMgrPluginMockRecorder) ValidateZone(name, zone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateZone", reflect.TypeOf((*MockZoneMgrPlugin)(nil).ValidateZone), name, zone)
}
