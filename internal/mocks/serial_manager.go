// Code generated by MockGen. DO NOT EDIT.
// Source: dns/serial/serial_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSerialManager is a mock of SerialManager interface.
type MockSerialManager struct {
	ctrl     *gomock.Controller
	recorder *MockSerialManagerMockRecorder
}

// MockSerialManagerMockRecorder is the mock recorder for MockSerialManager.
type MockSerialManagerMockRecorder struct {
	mock *MockSerialManager
}

// NewMockSerialManager creates a new mock instance.
func NewMockSerialManager(ctrl *gomock.Controller) *MockSerialManager {
	mock := &MockSerialManager{ctrl: ctrl}
	mock.recorder = &MockSerialManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSerialManager) EXPECT() *MockSerialManagerMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockSerialManager) Next(zoneName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", zoneName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockSerialManagerMockRecorder) Next(zoneName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSerialManager)(nil).Next), zoneName)
}
