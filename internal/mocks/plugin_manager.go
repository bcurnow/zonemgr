// Code generated by MockGen. DO NOT EDIT.
// Source: plugins/plugin_manager/plugin_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	plugins "github.com/bcurnow/zonemgr/plugins"
	gomock "github.com/golang/mock/gomock"
)

// MockPluginManager is a mock of PluginManager interface.
type MockPluginManager struct {
	ctrl     *gomock.Controller
	recorder *MockPluginManagerMockRecorder
}

// MockPluginManagerMockRecorder is the mock recorder for MockPluginManager.
type MockPluginManagerMockRecorder struct {
	mock *MockPluginManager
}

// NewMockPluginManager creates a new mock instance.
func NewMockPluginManager(ctrl *gomock.Controller) *MockPluginManager {
	mock := &MockPluginManager{ctrl: ctrl}
	mock.recorder = &MockPluginManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginManager) EXPECT() *MockPluginManagerMockRecorder {
	return m.recorder
}

// LoadPlugins mocks base method.
func (m *MockPluginManager) LoadPlugins(pluginDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPlugins", pluginDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadPlugins indicates an expected call of LoadPlugins.
func (mr *MockPluginManagerMockRecorder) LoadPlugins(pluginDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPlugins", reflect.TypeOf((*MockPluginManager)(nil).LoadPlugins), pluginDir)
}

// Metadata mocks base method.
func (m *MockPluginManager) Metadata() map[plugins.PluginType]*plugins.PluginMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(map[plugins.PluginType]*plugins.PluginMetadata)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockPluginManagerMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockPluginManager)(nil).Metadata))
}

// Plugins mocks base method.
func (m *MockPluginManager) Plugins() map[plugins.PluginType]plugins.ZoneMgrPlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plugins")
	ret0, _ := ret[0].(map[plugins.PluginType]plugins.ZoneMgrPlugin)
	return ret0
}

// Plugins indicates an expected call of Plugins.
func (mr *MockPluginManagerMockRecorder) Plugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plugins", reflect.TypeOf((*MockPluginManager)(nil).Plugins))
}
