// Code generated by MockGen. DO NOT EDIT.
// Source: utils/filesystem.go

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	flock "github.com/gofrs/flock"
	gomock "github.com/golang/mock/gomock"
)

// MockFileSystemOperations is a mock of FileSystemOperations interface.
type MockFileSystemOperations struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemOperationsMockRecorder
}

// MockFileSystemOperationsMockRecorder is the mock recorder for MockFileSystemOperations.
type MockFileSystemOperationsMockRecorder struct {
	mock *MockFileSystemOperations
}

// NewMockFileSystemOperations creates a new mock instance.
func NewMockFileSystemOperations(ctrl *gomock.Controller) *MockFileSystemOperations {
	mock := &MockFileSystemOperations{ctrl: ctrl}
	mock.recorder = &MockFileSystemOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystemOperations) EXPECT() *MockFileSystemOperationsMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockFileSystemOperations) CreateFile(path string, mode os.FileMode, contentFn func() ([]byte, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", path, mode, contentFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileSystemOperationsMockRecorder) CreateFile(path, mode, contentFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileSystemOperations)(nil).CreateFile), path, mode, contentFn)
}

// Exists mocks base method.
func (m *MockFileSystemOperations) Exists(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockFileSystemOperationsMockRecorder) Exists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFileSystemOperations)(nil).Exists), path)
}

// Flock mocks base method.
func (m *MockFileSystemOperations) Flock(path string) (*flock.Flock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flock", path)
	ret0, _ := ret[0].(*flock.Flock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Flock indicates an expected call of Flock.
func (mr *MockFileSystemOperationsMockRecorder) Flock(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flock", reflect.TypeOf((*MockFileSystemOperations)(nil).Flock), path)
}

// HomeDir mocks base method.
func (m *MockFileSystemOperations) HomeDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HomeDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// HomeDir indicates an expected call of HomeDir.
func (mr *MockFileSystemOperationsMockRecorder) HomeDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HomeDir", reflect.TypeOf((*MockFileSystemOperations)(nil).HomeDir))
}

// MkdirAll mocks base method.
func (m *MockFileSystemOperations) MkdirAll(path string, mode os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockFileSystemOperationsMockRecorder) MkdirAll(path, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFileSystemOperations)(nil).MkdirAll), path, mode)
}

// ToAbsoluteFilePath mocks base method.
func (m *MockFileSystemOperations) ToAbsoluteFilePath(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToAbsoluteFilePath", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToAbsoluteFilePath indicates an expected call of ToAbsoluteFilePath.
func (mr *MockFileSystemOperationsMockRecorder) ToAbsoluteFilePath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToAbsoluteFilePath", reflect.TypeOf((*MockFileSystemOperations)(nil).ToAbsoluteFilePath), path)
}

// WalkExecutables mocks base method.
func (m *MockFileSystemOperations) WalkExecutables(root string, includeSubDirs bool) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkExecutables", root, includeSubDirs)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalkExecutables indicates an expected call of WalkExecutables.
func (mr *MockFileSystemOperationsMockRecorder) WalkExecutables(root, includeSubDirs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkExecutables", reflect.TypeOf((*MockFileSystemOperations)(nil).WalkExecutables), root, includeSubDirs)
}
