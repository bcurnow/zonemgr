// Code generated by MockGen. DO NOT EDIT.
// Source: utils/filesystem.go

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileSystem is a mock of FileSystem interface.
type MockFileSystem struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemMockRecorder
}

// MockFileSystemMockRecorder is the mock recorder for MockFileSystem.
type MockFileSystemMockRecorder struct {
	mock *MockFileSystem
}

// NewMockFileSystem creates a new mock instance.
func NewMockFileSystem(ctrl *gomock.Controller) *MockFileSystem {
	mock := &MockFileSystem{ctrl: ctrl}
	mock.recorder = &MockFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystem) EXPECT() *MockFileSystemMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockFileSystem) CreateFile(path string, mode os.FileMode, contentFn func() ([]byte, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", path, mode, contentFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileSystemMockRecorder) CreateFile(path, mode, contentFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileSystem)(nil).CreateFile), path, mode, contentFn)
}

// HomeDir mocks base method.
func (m *MockFileSystem) HomeDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HomeDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// HomeDir indicates an expected call of HomeDir.
func (mr *MockFileSystemMockRecorder) HomeDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HomeDir", reflect.TypeOf((*MockFileSystem)(nil).HomeDir))
}

// ToAbsoluteFilePath mocks base method.
func (m *MockFileSystem) ToAbsoluteFilePath(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToAbsoluteFilePath", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToAbsoluteFilePath indicates an expected call of ToAbsoluteFilePath.
func (mr *MockFileSystemMockRecorder) ToAbsoluteFilePath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToAbsoluteFilePath", reflect.TypeOf((*MockFileSystem)(nil).ToAbsoluteFilePath), path)
}

// WalkExecutables mocks base method.
func (m *MockFileSystem) WalkExecutables(root string, includeSubDirs bool) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkExecutables", root, includeSubDirs)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalkExecutables indicates an expected call of WalkExecutables.
func (mr *MockFileSystemMockRecorder) WalkExecutables(root, includeSubDirs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkExecutables", reflect.TypeOf((*MockFileSystem)(nil).WalkExecutables), root, includeSubDirs)
}
