// Code generated by MockGen. DO NOT EDIT.
// Source: dns/serial/serial_number_generator.go

// Package serial is a generated GoMock package.
package serial

import (
	reflect "reflect"

	models "github.com/bcurnow/zonemgr/models"
	gomock "github.com/golang/mock/gomock"
)

// MockGenerator is a mock of Generator interface.
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator.
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance.
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// FromSerialIndex mocks base method.
func (m *MockGenerator) FromSerialIndex(si *models.SerialIndex) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromSerialIndex", si)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromSerialIndex indicates an expected call of FromSerialIndex.
func (mr *MockGeneratorMockRecorder) FromSerialIndex(si interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromSerialIndex", reflect.TypeOf((*MockGenerator)(nil).FromSerialIndex), si)
}

// FromString mocks base method.
func (m *MockGenerator) FromString(serialString string) (*uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromString", serialString)
	ret0, _ := ret[0].(*uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromString indicates an expected call of FromString.
func (mr *MockGeneratorMockRecorder) FromString(serialString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromString", reflect.TypeOf((*MockGenerator)(nil).FromString), serialString)
}

// GenerateBase mocks base method.
func (m *MockGenerator) GenerateBase() (*uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBase")
	ret0, _ := ret[0].(*uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateBase indicates an expected call of GenerateBase.
func (mr *MockGeneratorMockRecorder) GenerateBase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBase", reflect.TypeOf((*MockGenerator)(nil).GenerateBase))
}
