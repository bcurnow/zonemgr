// Code generated by MockGen. DO NOT EDIT.
// Source: plugins/soa_values_normalizer.go

// Package plugins is a generated GoMock package.
package plugins

import (
	reflect "reflect"

	models "github.com/bcurnow/zonemgr/models"
	gomock "github.com/golang/mock/gomock"
)

// MockValuesNormalizer is a mock of ValuesNormalizer interface.
type MockValuesNormalizer struct {
	ctrl     *gomock.Controller
	recorder *MockValuesNormalizerMockRecorder
}

// MockValuesNormalizerMockRecorder is the mock recorder for MockValuesNormalizer.
type MockValuesNormalizerMockRecorder struct {
	mock *MockValuesNormalizer
}

// NewMockValuesNormalizer creates a new mock instance.
func NewMockValuesNormalizer(ctrl *gomock.Controller) *MockValuesNormalizer {
	mock := &MockValuesNormalizer{ctrl: ctrl}
	mock.recorder = &MockValuesNormalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValuesNormalizer) EXPECT() *MockValuesNormalizerMockRecorder {
	return m.recorder
}

// Normalize mocks base method.
func (m *MockValuesNormalizer) Normalize(identifer string, rr *models.ResourceRecord, validations Validator, generateSerial bool, serial string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Normalize", identifer, rr, validations, generateSerial, serial)
	ret0, _ := ret[0].(error)
	return ret0
}

// Normalize indicates an expected call of Normalize.
func (mr *MockValuesNormalizerMockRecorder) Normalize(identifer, rr, validations, generateSerial, serial interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Normalize", reflect.TypeOf((*MockValuesNormalizer)(nil).Normalize), identifer, rr, validations, generateSerial, serial)
}
