// Code generated by MockGen. DO NOT EDIT.
// Source: plugins/validator.go

// Package plugins is a generated GoMock package.
package plugins

import (
	reflect "reflect"

	models "github.com/bcurnow/zonemgr/models"
	gomock "github.com/golang/mock/gomock"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// CommonValidations mocks base method.
func (m *MockValidator) CommonValidations(identifier string, rr *models.ResourceRecord, supportedTypes ...PluginType) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{identifier, rr}
	for _, a := range supportedTypes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommonValidations", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommonValidations indicates an expected call of CommonValidations.
func (mr *MockValidatorMockRecorder) CommonValidations(identifier, rr interface{}, supportedTypes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{identifier, rr}, supportedTypes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommonValidations", reflect.TypeOf((*MockValidator)(nil).CommonValidations), varargs...)
}

// EnsureFullyQualified mocks base method.
func (m *MockValidator) EnsureFullyQualified(identifier, name string, rrType models.ResourceRecordType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureFullyQualified", identifier, name, rrType)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureFullyQualified indicates an expected call of EnsureFullyQualified.
func (mr *MockValidatorMockRecorder) EnsureFullyQualified(identifier, name, rrType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureFullyQualified", reflect.TypeOf((*MockValidator)(nil).EnsureFullyQualified), identifier, name, rrType)
}

// EnsureIP mocks base method.
func (m *MockValidator) EnsureIP(identifier, s string, rrType models.ResourceRecordType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureIP", identifier, s, rrType)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureIP indicates an expected call of EnsureIP.
func (mr *MockValidatorMockRecorder) EnsureIP(identifier, s, rrType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureIP", reflect.TypeOf((*MockValidator)(nil).EnsureIP), identifier, s, rrType)
}

// EnsureNotIP mocks base method.
func (m *MockValidator) EnsureNotIP(identifier, s string, rrType models.ResourceRecordType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureNotIP", identifier, s, rrType)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureNotIP indicates an expected call of EnsureNotIP.
func (mr *MockValidatorMockRecorder) EnsureNotIP(identifier, s, rrType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureNotIP", reflect.TypeOf((*MockValidator)(nil).EnsureNotIP), identifier, s, rrType)
}

// EnsurePositive mocks base method.
func (m *MockValidator) EnsurePositive(identifier, s, fieldName string, rrType models.ResourceRecordType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsurePositive", identifier, s, fieldName, rrType)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsurePositive indicates an expected call of EnsurePositive.
func (mr *MockValidatorMockRecorder) EnsurePositive(identifier, s, fieldName, rrType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsurePositive", reflect.TypeOf((*MockValidator)(nil).EnsurePositive), identifier, s, fieldName, rrType)
}

// EnsureSupportedPluginType mocks base method.
func (m *MockValidator) EnsureSupportedPluginType(identifier string, rrType models.ResourceRecordType, supportedTypes ...PluginType) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{identifier, rrType}
	for _, a := range supportedTypes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnsureSupportedPluginType", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureSupportedPluginType indicates an expected call of EnsureSupportedPluginType.
func (mr *MockValidatorMockRecorder) EnsureSupportedPluginType(identifier, rrType interface{}, supportedTypes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{identifier, rrType}, supportedTypes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureSupportedPluginType", reflect.TypeOf((*MockValidator)(nil).EnsureSupportedPluginType), varargs...)
}

// EnsureTrailingDot mocks base method.
func (m *MockValidator) EnsureTrailingDot(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureTrailingDot", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// EnsureTrailingDot indicates an expected call of EnsureTrailingDot.
func (mr *MockValidatorMockRecorder) EnsureTrailingDot(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureTrailingDot", reflect.TypeOf((*MockValidator)(nil).EnsureTrailingDot), name)
}

// EnsureValidNameOrWildcard mocks base method.
func (m *MockValidator) EnsureValidNameOrWildcard(identifier, name string, rrType models.ResourceRecordType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureValidNameOrWildcard", identifier, name, rrType)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureValidNameOrWildcard indicates an expected call of EnsureValidNameOrWildcard.
func (mr *MockValidatorMockRecorder) EnsureValidNameOrWildcard(identifier, name, rrType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureValidNameOrWildcard", reflect.TypeOf((*MockValidator)(nil).EnsureValidNameOrWildcard), identifier, name, rrType)
}

// EnsureValidRFC1035Name mocks base method.
func (m *MockValidator) EnsureValidRFC1035Name(identifier, name string, rrType models.ResourceRecordType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureValidRFC1035Name", identifier, name, rrType)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureValidRFC1035Name indicates an expected call of EnsureValidRFC1035Name.
func (mr *MockValidatorMockRecorder) EnsureValidRFC1035Name(identifier, name, rrType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureValidRFC1035Name", reflect.TypeOf((*MockValidator)(nil).EnsureValidRFC1035Name), identifier, name, rrType)
}

// FormatEmail mocks base method.
func (m *MockValidator) FormatEmail(identifier, email string, rrType models.ResourceRecordType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatEmail", identifier, email, rrType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatEmail indicates an expected call of FormatEmail.
func (mr *MockValidatorMockRecorder) FormatEmail(identifier, email, rrType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatEmail", reflect.TypeOf((*MockValidator)(nil).FormatEmail), identifier, email, rrType)
}
