// Copyright (C) 2025 Brian Curnow
//
// This file is part of zonemgr.
//
// zonemgr is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// zonemgr is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with zonemgr.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: plugins/proto/zonemgrplugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ZonemgrPlugin_PluginVersion_FullMethodName        = "/ZonemgrPlugin/PluginVersion"
	ZonemgrPlugin_PluginTypesSupported_FullMethodName = "/ZonemgrPlugin/PluginTypesSupported"
	ZonemgrPlugin_Configure_FullMethodName            = "/ZonemgrPlugin/Configure"
	ZonemgrPlugin_Normalize_FullMethodName            = "/ZonemgrPlugin/Normalize"
	ZonemgrPlugin_ValidateZone_FullMethodName         = "/ZonemgrPlugin/ValidateZone"
	ZonemgrPlugin_Render_FullMethodName               = "/ZonemgrPlugin/Render"
)

// ZonemgrPluginClient is the client API for ZonemgrPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZonemgrPluginClient interface {
	PluginVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginVersionResponse, error)
	PluginTypesSupported(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginTypesSupportedResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*Error, error)
	Normalize(ctx context.Context, in *NormalizeRequest, opts ...grpc.CallOption) (*NormalizeResponse, error)
	ValidateZone(ctx context.Context, in *ValidateZoneRequest, opts ...grpc.CallOption) (*Error, error)
	Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*RenderResonse, error)
}

type zonemgrPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewZonemgrPluginClient(cc grpc.ClientConnInterface) ZonemgrPluginClient {
	return &zonemgrPluginClient{cc}
}

func (c *zonemgrPluginClient) PluginVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PluginVersionResponse)
	err := c.cc.Invoke(ctx, ZonemgrPlugin_PluginVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonemgrPluginClient) PluginTypesSupported(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginTypesSupportedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PluginTypesSupportedResponse)
	err := c.cc.Invoke(ctx, ZonemgrPlugin_PluginTypesSupported_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonemgrPluginClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*Error, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Error)
	err := c.cc.Invoke(ctx, ZonemgrPlugin_Configure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonemgrPluginClient) Normalize(ctx context.Context, in *NormalizeRequest, opts ...grpc.CallOption) (*NormalizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NormalizeResponse)
	err := c.cc.Invoke(ctx, ZonemgrPlugin_Normalize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonemgrPluginClient) ValidateZone(ctx context.Context, in *ValidateZoneRequest, opts ...grpc.CallOption) (*Error, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Error)
	err := c.cc.Invoke(ctx, ZonemgrPlugin_ValidateZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonemgrPluginClient) Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*RenderResonse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenderResonse)
	err := c.cc.Invoke(ctx, ZonemgrPlugin_Render_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZonemgrPluginServer is the server API for ZonemgrPlugin service.
// All implementations should embed UnimplementedZonemgrPluginServer
// for forward compatibility.
type ZonemgrPluginServer interface {
	PluginVersion(context.Context, *Empty) (*PluginVersionResponse, error)
	PluginTypesSupported(context.Context, *Empty) (*PluginTypesSupportedResponse, error)
	Configure(context.Context, *ConfigureRequest) (*Error, error)
	Normalize(context.Context, *NormalizeRequest) (*NormalizeResponse, error)
	ValidateZone(context.Context, *ValidateZoneRequest) (*Error, error)
	Render(context.Context, *RenderRequest) (*RenderResonse, error)
}

// UnimplementedZonemgrPluginServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedZonemgrPluginServer struct{}

func (UnimplementedZonemgrPluginServer) PluginVersion(context.Context, *Empty) (*PluginVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginVersion not implemented")
}
func (UnimplementedZonemgrPluginServer) PluginTypesSupported(context.Context, *Empty) (*PluginTypesSupportedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginTypesSupported not implemented")
}
func (UnimplementedZonemgrPluginServer) Configure(context.Context, *ConfigureRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedZonemgrPluginServer) Normalize(context.Context, *NormalizeRequest) (*NormalizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Normalize not implemented")
}
func (UnimplementedZonemgrPluginServer) ValidateZone(context.Context, *ValidateZoneRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateZone not implemented")
}
func (UnimplementedZonemgrPluginServer) Render(context.Context, *RenderRequest) (*RenderResonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Render not implemented")
}
func (UnimplementedZonemgrPluginServer) testEmbeddedByValue() {}

// UnsafeZonemgrPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZonemgrPluginServer will
// result in compilation errors.
type UnsafeZonemgrPluginServer interface {
	mustEmbedUnimplementedZonemgrPluginServer()
}

func RegisterZonemgrPluginServer(s grpc.ServiceRegistrar, srv ZonemgrPluginServer) {
	// If the following call pancis, it indicates UnimplementedZonemgrPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ZonemgrPlugin_ServiceDesc, srv)
}

func _ZonemgrPlugin_PluginVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonemgrPluginServer).PluginVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZonemgrPlugin_PluginVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonemgrPluginServer).PluginVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonemgrPlugin_PluginTypesSupported_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonemgrPluginServer).PluginTypesSupported(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZonemgrPlugin_PluginTypesSupported_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonemgrPluginServer).PluginTypesSupported(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonemgrPlugin_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonemgrPluginServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZonemgrPlugin_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonemgrPluginServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonemgrPlugin_Normalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NormalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonemgrPluginServer).Normalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZonemgrPlugin_Normalize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonemgrPluginServer).Normalize(ctx, req.(*NormalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonemgrPlugin_ValidateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonemgrPluginServer).ValidateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZonemgrPlugin_ValidateZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonemgrPluginServer).ValidateZone(ctx, req.(*ValidateZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonemgrPlugin_Render_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonemgrPluginServer).Render(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZonemgrPlugin_Render_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonemgrPluginServer).Render(ctx, req.(*RenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZonemgrPlugin_ServiceDesc is the grpc.ServiceDesc for ZonemgrPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZonemgrPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ZonemgrPlugin",
	HandlerType: (*ZonemgrPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PluginVersion",
			Handler:    _ZonemgrPlugin_PluginVersion_Handler,
		},
		{
			MethodName: "PluginTypesSupported",
			Handler:    _ZonemgrPlugin_PluginTypesSupported_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _ZonemgrPlugin_Configure_Handler,
		},
		{
			MethodName: "Normalize",
			Handler:    _ZonemgrPlugin_Normalize_Handler,
		},
		{
			MethodName: "ValidateZone",
			Handler:    _ZonemgrPlugin_ValidateZone_Handler,
		},
		{
			MethodName: "Render",
			Handler:    _ZonemgrPlugin_Render_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugins/proto/zonemgrplugin.proto",
}
