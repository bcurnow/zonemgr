// Code generated by MockGen. DO NOT EDIT.
// Source: plugins/proto/zonemgrplugin_grpc.pb.go

// Package proto is a generated GoMock package.
package proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockZonemgrPluginClient is a mock of ZonemgrPluginClient interface.
type MockZonemgrPluginClient struct {
	ctrl     *gomock.Controller
	recorder *MockZonemgrPluginClientMockRecorder
}

// MockZonemgrPluginClientMockRecorder is the mock recorder for MockZonemgrPluginClient.
type MockZonemgrPluginClientMockRecorder struct {
	mock *MockZonemgrPluginClient
}

// NewMockZonemgrPluginClient creates a new mock instance.
func NewMockZonemgrPluginClient(ctrl *gomock.Controller) *MockZonemgrPluginClient {
	mock := &MockZonemgrPluginClient{ctrl: ctrl}
	mock.recorder = &MockZonemgrPluginClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZonemgrPluginClient) EXPECT() *MockZonemgrPluginClientMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockZonemgrPluginClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Configure", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure.
func (mr *MockZonemgrPluginClientMockRecorder) Configure(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockZonemgrPluginClient)(nil).Configure), varargs...)
}

// Normalize mocks base method.
func (m *MockZonemgrPluginClient) Normalize(ctx context.Context, in *NormalizeRequest, opts ...grpc.CallOption) (*NormalizeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Normalize", varargs...)
	ret0, _ := ret[0].(*NormalizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Normalize indicates an expected call of Normalize.
func (mr *MockZonemgrPluginClientMockRecorder) Normalize(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Normalize", reflect.TypeOf((*MockZonemgrPluginClient)(nil).Normalize), varargs...)
}

// PluginTypes mocks base method.
func (m *MockZonemgrPluginClient) PluginTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PluginTypes", varargs...)
	ret0, _ := ret[0].(*PluginTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginTypes indicates an expected call of PluginTypes.
func (mr *MockZonemgrPluginClientMockRecorder) PluginTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginTypes", reflect.TypeOf((*MockZonemgrPluginClient)(nil).PluginTypes), varargs...)
}

// PluginVersion mocks base method.
func (m *MockZonemgrPluginClient) PluginVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PluginVersion", varargs...)
	ret0, _ := ret[0].(*PluginVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginVersion indicates an expected call of PluginVersion.
func (mr *MockZonemgrPluginClientMockRecorder) PluginVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginVersion", reflect.TypeOf((*MockZonemgrPluginClient)(nil).PluginVersion), varargs...)
}

// Render mocks base method.
func (m *MockZonemgrPluginClient) Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*RenderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Render", varargs...)
	ret0, _ := ret[0].(*RenderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Render indicates an expected call of Render.
func (mr *MockZonemgrPluginClientMockRecorder) Render(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockZonemgrPluginClient)(nil).Render), varargs...)
}

// ValidateZone mocks base method.
func (m *MockZonemgrPluginClient) ValidateZone(ctx context.Context, in *ValidateZoneRequest, opts ...grpc.CallOption) (*Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateZone", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateZone indicates an expected call of ValidateZone.
func (mr *MockZonemgrPluginClientMockRecorder) ValidateZone(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateZone", reflect.TypeOf((*MockZonemgrPluginClient)(nil).ValidateZone), varargs...)
}

// MockZonemgrPluginServer is a mock of ZonemgrPluginServer interface.
type MockZonemgrPluginServer struct {
	ctrl     *gomock.Controller
	recorder *MockZonemgrPluginServerMockRecorder
}

// MockZonemgrPluginServerMockRecorder is the mock recorder for MockZonemgrPluginServer.
type MockZonemgrPluginServerMockRecorder struct {
	mock *MockZonemgrPluginServer
}

// NewMockZonemgrPluginServer creates a new mock instance.
func NewMockZonemgrPluginServer(ctrl *gomock.Controller) *MockZonemgrPluginServer {
	mock := &MockZonemgrPluginServer{ctrl: ctrl}
	mock.recorder = &MockZonemgrPluginServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZonemgrPluginServer) EXPECT() *MockZonemgrPluginServerMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockZonemgrPluginServer) Configure(arg0 context.Context, arg1 *ConfigureRequest) (*Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure.
func (mr *MockZonemgrPluginServerMockRecorder) Configure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockZonemgrPluginServer)(nil).Configure), arg0, arg1)
}

// Normalize mocks base method.
func (m *MockZonemgrPluginServer) Normalize(arg0 context.Context, arg1 *NormalizeRequest) (*NormalizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Normalize", arg0, arg1)
	ret0, _ := ret[0].(*NormalizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Normalize indicates an expected call of Normalize.
func (mr *MockZonemgrPluginServerMockRecorder) Normalize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Normalize", reflect.TypeOf((*MockZonemgrPluginServer)(nil).Normalize), arg0, arg1)
}

// PluginTypes mocks base method.
func (m *MockZonemgrPluginServer) PluginTypes(arg0 context.Context, arg1 *Empty) (*PluginTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginTypes", arg0, arg1)
	ret0, _ := ret[0].(*PluginTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginTypes indicates an expected call of PluginTypes.
func (mr *MockZonemgrPluginServerMockRecorder) PluginTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginTypes", reflect.TypeOf((*MockZonemgrPluginServer)(nil).PluginTypes), arg0, arg1)
}

// PluginVersion mocks base method.
func (m *MockZonemgrPluginServer) PluginVersion(arg0 context.Context, arg1 *Empty) (*PluginVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginVersion", arg0, arg1)
	ret0, _ := ret[0].(*PluginVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginVersion indicates an expected call of PluginVersion.
func (mr *MockZonemgrPluginServerMockRecorder) PluginVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginVersion", reflect.TypeOf((*MockZonemgrPluginServer)(nil).PluginVersion), arg0, arg1)
}

// Render mocks base method.
func (m *MockZonemgrPluginServer) Render(arg0 context.Context, arg1 *RenderRequest) (*RenderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", arg0, arg1)
	ret0, _ := ret[0].(*RenderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Render indicates an expected call of Render.
func (mr *MockZonemgrPluginServerMockRecorder) Render(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockZonemgrPluginServer)(nil).Render), arg0, arg1)
}

// ValidateZone mocks base method.
func (m *MockZonemgrPluginServer) ValidateZone(arg0 context.Context, arg1 *ValidateZoneRequest) (*Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateZone", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateZone indicates an expected call of ValidateZone.
func (mr *MockZonemgrPluginServerMockRecorder) ValidateZone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateZone", reflect.TypeOf((*MockZonemgrPluginServer)(nil).ValidateZone), arg0, arg1)
}

// MockUnsafeZonemgrPluginServer is a mock of UnsafeZonemgrPluginServer interface.
type MockUnsafeZonemgrPluginServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeZonemgrPluginServerMockRecorder
}

// MockUnsafeZonemgrPluginServerMockRecorder is the mock recorder for MockUnsafeZonemgrPluginServer.
type MockUnsafeZonemgrPluginServerMockRecorder struct {
	mock *MockUnsafeZonemgrPluginServer
}

// NewMockUnsafeZonemgrPluginServer creates a new mock instance.
func NewMockUnsafeZonemgrPluginServer(ctrl *gomock.Controller) *MockUnsafeZonemgrPluginServer {
	mock := &MockUnsafeZonemgrPluginServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeZonemgrPluginServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeZonemgrPluginServer) EXPECT() *MockUnsafeZonemgrPluginServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedZonemgrPluginServer mocks base method.
func (m *MockUnsafeZonemgrPluginServer) mustEmbedUnimplementedZonemgrPluginServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedZonemgrPluginServer")
}

// mustEmbedUnimplementedZonemgrPluginServer indicates an expected call of mustEmbedUnimplementedZonemgrPluginServer.
func (mr *MockUnsafeZonemgrPluginServerMockRecorder) mustEmbedUnimplementedZonemgrPluginServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedZonemgrPluginServer", reflect.TypeOf((*MockUnsafeZonemgrPluginServer)(nil).mustEmbedUnimplementedZonemgrPluginServer))
}
